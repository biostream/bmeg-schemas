// Code generated by protoc-gen-go.
// source: obs_deck.proto
// DO NOT EDIT!

package bmeg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SampleSelectionMethod_SelectionMethod int32

const (
	SampleSelectionMethod_TOP_BOTTOM SampleSelectionMethod_SelectionMethod = 0
	SampleSelectionMethod_TOP        SampleSelectionMethod_SelectionMethod = 1
	SampleSelectionMethod_BOTTOM     SampleSelectionMethod_SelectionMethod = 2
)

var SampleSelectionMethod_SelectionMethod_name = map[int32]string{
	0: "TOP_BOTTOM",
	1: "TOP",
	2: "BOTTOM",
}
var SampleSelectionMethod_SelectionMethod_value = map[string]int32{
	"TOP_BOTTOM": 0,
	"TOP":        1,
	"BOTTOM":     2,
}

func (x SampleSelectionMethod_SelectionMethod) String() string {
	return proto.EnumName(SampleSelectionMethod_SelectionMethod_name, int32(x))
}
func (SampleSelectionMethod_SelectionMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{19, 0}
}

// Is SampleData.val to be interpreted as a string, number, or category?
type EventData_EventMetadata_Datatype int32

const (
	EventData_EventMetadata_STRING    EventData_EventMetadata_Datatype = 0
	EventData_EventMetadata_NUMERIC   EventData_EventMetadata_Datatype = 1
	EventData_EventMetadata_CATEGORIC EventData_EventMetadata_Datatype = 2
)

var EventData_EventMetadata_Datatype_name = map[int32]string{
	0: "STRING",
	1: "NUMERIC",
	2: "CATEGORIC",
}
var EventData_EventMetadata_Datatype_value = map[string]int32{
	"STRING":    0,
	"NUMERIC":   1,
	"CATEGORIC": 2,
}

func (x EventData_EventMetadata_Datatype) String() string {
	return proto.EnumName(EventData_EventMetadata_Datatype_name, int32(x))
}
func (EventData_EventMetadata_Datatype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{21, 0, 0}
}

type HeavilyWeightedGenesSignaturesQuery struct {
	GeneList []string `protobuf:"bytes,1,rep,name=geneList" json:"geneList,omitempty"`
}

func (m *HeavilyWeightedGenesSignaturesQuery) Reset()         { *m = HeavilyWeightedGenesSignaturesQuery{} }
func (m *HeavilyWeightedGenesSignaturesQuery) String() string { return proto.CompactTextString(m) }
func (*HeavilyWeightedGenesSignaturesQuery) ProtoMessage()    {}
func (*HeavilyWeightedGenesSignaturesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0}
}

func (m *HeavilyWeightedGenesSignaturesQuery) GetGeneList() []string {
	if m != nil {
		return m.GeneList
	}
	return nil
}

type HeavilyWeightedGenesSignaturesResponse struct {
	ResponseItems []*HeavilyWeightedGenesSignaturesResponseResponseItem `protobuf:"bytes,1,rep,name=responseItems" json:"responseItems,omitempty"`
}

func (m *HeavilyWeightedGenesSignaturesResponse) Reset() {
	*m = HeavilyWeightedGenesSignaturesResponse{}
}
func (m *HeavilyWeightedGenesSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*HeavilyWeightedGenesSignaturesResponse) ProtoMessage()    {}
func (*HeavilyWeightedGenesSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{1}
}

func (m *HeavilyWeightedGenesSignaturesResponse) GetResponseItems() []*HeavilyWeightedGenesSignaturesResponseResponseItem {
	if m != nil {
		return m.ResponseItems
	}
	return nil
}

type HeavilyWeightedGenesSignaturesResponseResponseItem struct {
	SignatureMetadata *EventData_EventMetadata `protobuf:"bytes,1,opt,name=signatureMetadata" json:"signatureMetadata,omitempty"`
	// composite score for query gene set
	Score float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
}

func (m *HeavilyWeightedGenesSignaturesResponseResponseItem) Reset() {
	*m = HeavilyWeightedGenesSignaturesResponseResponseItem{}
}
func (m *HeavilyWeightedGenesSignaturesResponseResponseItem) String() string {
	return proto.CompactTextString(m)
}
func (*HeavilyWeightedGenesSignaturesResponseResponseItem) ProtoMessage() {}
func (*HeavilyWeightedGenesSignaturesResponseResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{1, 0}
}

func (m *HeavilyWeightedGenesSignaturesResponseResponseItem) GetSignatureMetadata() *EventData_EventMetadata {
	if m != nil {
		return m.SignatureMetadata
	}
	return nil
}

func (m *HeavilyWeightedGenesSignaturesResponseResponseItem) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// This is a ObservationDeckQuery where there is no sampleList.
type SampleDataForSamplesWithExtremeScoresQuery struct {
	// return the top 50 and bottom 50 scoring samples for these signatureEvents
	SignatureMetadata []*EventData_EventMetadata `protobuf:"bytes,1,rep,name=signatureMetadata" json:"signatureMetadata,omitempty"`
	// return the expression values for the samples returned in signatureMetadata
	ExpressionMetadata []*EventData_EventMetadata `protobuf:"bytes,2,rep,name=expressionMetadata" json:"expressionMetadata,omitempty"`
	// return the clinical event data for the samples returned in signatureMetadata
	ClinicalEventMetadata []*EventData_EventMetadata `protobuf:"bytes,3,rep,name=clinicalEventMetadata" json:"clinicalEventMetadata,omitempty"`
	// return the mutation data for the samples returned in signatureMetadata
	MutationMetadata []*EventData_EventMetadata `protobuf:"bytes,4,rep,name=mutationMetadata" json:"mutationMetadata,omitempty"`
}

func (m *SampleDataForSamplesWithExtremeScoresQuery) Reset() {
	*m = SampleDataForSamplesWithExtremeScoresQuery{}
}
func (m *SampleDataForSamplesWithExtremeScoresQuery) String() string {
	return proto.CompactTextString(m)
}
func (*SampleDataForSamplesWithExtremeScoresQuery) ProtoMessage() {}
func (*SampleDataForSamplesWithExtremeScoresQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2}
}

func (m *SampleDataForSamplesWithExtremeScoresQuery) GetSignatureMetadata() []*EventData_EventMetadata {
	if m != nil {
		return m.SignatureMetadata
	}
	return nil
}

func (m *SampleDataForSamplesWithExtremeScoresQuery) GetExpressionMetadata() []*EventData_EventMetadata {
	if m != nil {
		return m.ExpressionMetadata
	}
	return nil
}

func (m *SampleDataForSamplesWithExtremeScoresQuery) GetClinicalEventMetadata() []*EventData_EventMetadata {
	if m != nil {
		return m.ClinicalEventMetadata
	}
	return nil
}

func (m *SampleDataForSamplesWithExtremeScoresQuery) GetMutationMetadata() []*EventData_EventMetadata {
	if m != nil {
		return m.MutationMetadata
	}
	return nil
}

// This is the same as ObservationDeckResponse.
type SampleDataForSamplesWithExtremeScoresResponse struct {
	EventData []*EventData `protobuf:"bytes,1,rep,name=eventData" json:"eventData,omitempty"`
}

func (m *SampleDataForSamplesWithExtremeScoresResponse) Reset() {
	*m = SampleDataForSamplesWithExtremeScoresResponse{}
}
func (m *SampleDataForSamplesWithExtremeScoresResponse) String() string {
	return proto.CompactTextString(m)
}
func (*SampleDataForSamplesWithExtremeScoresResponse) ProtoMessage() {}
func (*SampleDataForSamplesWithExtremeScoresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{3}
}

func (m *SampleDataForSamplesWithExtremeScoresResponse) GetEventData() []*EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

type InferredVariantToSignatureEdgeQuery struct {
	GeneList []string `protobuf:"bytes,1,rep,name=geneList" json:"geneList,omitempty"`
}

func (m *InferredVariantToSignatureEdgeQuery) Reset()         { *m = InferredVariantToSignatureEdgeQuery{} }
func (m *InferredVariantToSignatureEdgeQuery) String() string { return proto.CompactTextString(m) }
func (*InferredVariantToSignatureEdgeQuery) ProtoMessage()    {}
func (*InferredVariantToSignatureEdgeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{4}
}

func (m *InferredVariantToSignatureEdgeQuery) GetGeneList() []string {
	if m != nil {
		return m.GeneList
	}
	return nil
}

// This is the same as ObservationDeckResponse.
// We expect to have at least the following: expression, mutation call, and drug sensitivity signature.
// Might also have copy number, and mutation impact score.
type InferredVariantToSignatureEdgesResponse struct {
	ReturnObj []*InferredVariantToSignatureEdgesResponse_ReturnObj `protobuf:"bytes,1,rep,name=returnObj" json:"returnObj,omitempty"`
}

func (m *InferredVariantToSignatureEdgesResponse) Reset() {
	*m = InferredVariantToSignatureEdgesResponse{}
}
func (m *InferredVariantToSignatureEdgesResponse) String() string { return proto.CompactTextString(m) }
func (*InferredVariantToSignatureEdgesResponse) ProtoMessage()    {}
func (*InferredVariantToSignatureEdgesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{5}
}

func (m *InferredVariantToSignatureEdgesResponse) GetReturnObj() []*InferredVariantToSignatureEdgesResponse_ReturnObj {
	if m != nil {
		return m.ReturnObj
	}
	return nil
}

type InferredVariantToSignatureEdgesResponse_ReturnObj struct {
	EventData               *EventData          `protobuf:"bytes,1,opt,name=eventData" json:"eventData,omitempty"`
	Significance            float32             `protobuf:"fixed32,2,opt,name=significance" json:"significance,omitempty"`
	SampleGroupDetails      *SampleGroupDetails `protobuf:"bytes,3,opt,name=sampleGroupDetails" json:"sampleGroupDetails,omitempty"`
	BackgroundGroupdDetails *SampleGroupDetails `protobuf:"bytes,4,opt,name=backgroundGroupdDetails" json:"backgroundGroupdDetails,omitempty"`
}

func (m *InferredVariantToSignatureEdgesResponse_ReturnObj) Reset() {
	*m = InferredVariantToSignatureEdgesResponse_ReturnObj{}
}
func (m *InferredVariantToSignatureEdgesResponse_ReturnObj) String() string {
	return proto.CompactTextString(m)
}
func (*InferredVariantToSignatureEdgesResponse_ReturnObj) ProtoMessage() {}
func (*InferredVariantToSignatureEdgesResponse_ReturnObj) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{5, 0}
}

func (m *InferredVariantToSignatureEdgesResponse_ReturnObj) GetEventData() *EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (m *InferredVariantToSignatureEdgesResponse_ReturnObj) GetSignificance() float32 {
	if m != nil {
		return m.Significance
	}
	return 0
}

func (m *InferredVariantToSignatureEdgesResponse_ReturnObj) GetSampleGroupDetails() *SampleGroupDetails {
	if m != nil {
		return m.SampleGroupDetails
	}
	return nil
}

func (m *InferredVariantToSignatureEdgesResponse_ReturnObj) GetBackgroundGroupdDetails() *SampleGroupDetails {
	if m != nil {
		return m.BackgroundGroupdDetails
	}
	return nil
}

// some basic details about a sample group
type SampleGroupDetails struct {
	Size      int32      `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Quartiles *Quartiles `protobuf:"bytes,2,opt,name=quartiles" json:"quartiles,omitempty"`
}

func (m *SampleGroupDetails) Reset()                    { *m = SampleGroupDetails{} }
func (m *SampleGroupDetails) String() string            { return proto.CompactTextString(m) }
func (*SampleGroupDetails) ProtoMessage()               {}
func (*SampleGroupDetails) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *SampleGroupDetails) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SampleGroupDetails) GetQuartiles() *Quartiles {
	if m != nil {
		return m.Quartiles
	}
	return nil
}

// information for calculating data range and interquartile range
type Quartiles struct {
	Minimum float32 `protobuf:"fixed32,1,opt,name=minimum" json:"minimum,omitempty"`
	First   float32 `protobuf:"fixed32,2,opt,name=first" json:"first,omitempty"`
	Second  float32 `protobuf:"fixed32,3,opt,name=second" json:"second,omitempty"`
	Third   float32 `protobuf:"fixed32,4,opt,name=third" json:"third,omitempty"`
	Maximum float32 `protobuf:"fixed32,5,opt,name=maximum" json:"maximum,omitempty"`
}

func (m *Quartiles) Reset()                    { *m = Quartiles{} }
func (m *Quartiles) String() string            { return proto.CompactTextString(m) }
func (*Quartiles) ProtoMessage()               {}
func (*Quartiles) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *Quartiles) GetMinimum() float32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *Quartiles) GetFirst() float32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Quartiles) GetSecond() float32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Quartiles) GetThird() float32 {
	if m != nil {
		return m.Third
	}
	return 0
}

func (m *Quartiles) GetMaximum() float32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

// query to get available clinical variable names
type AvailableClinicalVarsQuery struct {
}

func (m *AvailableClinicalVarsQuery) Reset()                    { *m = AvailableClinicalVarsQuery{} }
func (m *AvailableClinicalVarsQuery) String() string            { return proto.CompactTextString(m) }
func (*AvailableClinicalVarsQuery) ProtoMessage()               {}
func (*AvailableClinicalVarsQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

// response is a list of available clinical variable names
type AvailableClinicalVarsResponse struct {
	ClinicalVarNames []string `protobuf:"bytes,1,rep,name=clinicalVarNames" json:"clinicalVarNames,omitempty"`
}

func (m *AvailableClinicalVarsResponse) Reset()                    { *m = AvailableClinicalVarsResponse{} }
func (m *AvailableClinicalVarsResponse) String() string            { return proto.CompactTextString(m) }
func (*AvailableClinicalVarsResponse) ProtoMessage()               {}
func (*AvailableClinicalVarsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *AvailableClinicalVarsResponse) GetClinicalVarNames() []string {
	if m != nil {
		return m.ClinicalVarNames
	}
	return nil
}

// request clinical data
type SampleClinicalDataQuery struct {
	ClinicalVarNames []string `protobuf:"bytes,1,rep,name=clinicalVarNames" json:"clinicalVarNames,omitempty"`
}

func (m *SampleClinicalDataQuery) Reset()                    { *m = SampleClinicalDataQuery{} }
func (m *SampleClinicalDataQuery) String() string            { return proto.CompactTextString(m) }
func (*SampleClinicalDataQuery) ProtoMessage()               {}
func (*SampleClinicalDataQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *SampleClinicalDataQuery) GetClinicalVarNames() []string {
	if m != nil {
		return m.ClinicalVarNames
	}
	return nil
}

// respond with sample clinical data
type SampleClinicalDataResponse struct {
	EventData []*EventData `protobuf:"bytes,1,rep,name=eventData" json:"eventData,omitempty"`
}

func (m *SampleClinicalDataResponse) Reset()                    { *m = SampleClinicalDataResponse{} }
func (m *SampleClinicalDataResponse) String() string            { return proto.CompactTextString(m) }
func (*SampleClinicalDataResponse) ProtoMessage()               {}
func (*SampleClinicalDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *SampleClinicalDataResponse) GetEventData() []*EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

// query for signatures by name
// If no query was sent, return all signatures
type AvailableSignaturesQuery struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *AvailableSignaturesQuery) Reset()                    { *m = AvailableSignaturesQuery{} }
func (m *AvailableSignaturesQuery) String() string            { return proto.CompactTextString(m) }
func (*AvailableSignaturesQuery) ProtoMessage()               {}
func (*AvailableSignaturesQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *AvailableSignaturesQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// signature name response
type AvailableSignaturesResponse struct {
	SignatureEventMetadata []*EventData_EventMetadata `protobuf:"bytes,1,rep,name=signatureEventMetadata" json:"signatureEventMetadata,omitempty"`
}

func (m *AvailableSignaturesResponse) Reset()                    { *m = AvailableSignaturesResponse{} }
func (m *AvailableSignaturesResponse) String() string            { return proto.CompactTextString(m) }
func (*AvailableSignaturesResponse) ProtoMessage()               {}
func (*AvailableSignaturesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *AvailableSignaturesResponse) GetSignatureEventMetadata() []*EventData_EventMetadata {
	if m != nil {
		return m.SignatureEventMetadata
	}
	return nil
}

// correlator query
type CorrelatorQuery struct {
	PivotEvent *EventData_EventMetadata `protobuf:"bytes,1,opt,name=pivotEvent" json:"pivotEvent,omitempty"`
	// paging tells us how far down the ordered list of scored events we should return data for.
	CorrelatorPaging *DataPagingOptions `protobuf:"bytes,2,opt,name=correlatorPaging" json:"correlatorPaging,omitempty"`
}

func (m *CorrelatorQuery) Reset()                    { *m = CorrelatorQuery{} }
func (m *CorrelatorQuery) String() string            { return proto.CompactTextString(m) }
func (*CorrelatorQuery) ProtoMessage()               {}
func (*CorrelatorQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *CorrelatorQuery) GetPivotEvent() *EventData_EventMetadata {
	if m != nil {
		return m.PivotEvent
	}
	return nil
}

func (m *CorrelatorQuery) GetCorrelatorPaging() *DataPagingOptions {
	if m != nil {
		return m.CorrelatorPaging
	}
	return nil
}

// for specifying page of correlator results for each datatype
type DataPagingOptions struct {
	DatatypePaging []*DataPagingOptions_DatatypePaging `protobuf:"bytes,1,rep,name=datatypePaging" json:"datatypePaging,omitempty"`
}

func (m *DataPagingOptions) Reset()                    { *m = DataPagingOptions{} }
func (m *DataPagingOptions) String() string            { return proto.CompactTextString(m) }
func (*DataPagingOptions) ProtoMessage()               {}
func (*DataPagingOptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *DataPagingOptions) GetDatatypePaging() []*DataPagingOptions_DatatypePaging {
	if m != nil {
		return m.DatatypePaging
	}
	return nil
}

type DataPagingOptions_DatatypePaging struct {
	Datatype string `protobuf:"bytes,1,opt,name=datatype" json:"datatype,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
	// descending from most positive scores
	SelectedTopPage int32 `protobuf:"varint,3,opt,name=selectedTopPage" json:"selectedTopPage,omitempty"`
	// ascending from most negative scores
	SelectedBottomPage int32 `protobuf:"varint,4,opt,name=selectedBottomPage" json:"selectedBottomPage,omitempty"`
}

func (m *DataPagingOptions_DatatypePaging) Reset()         { *m = DataPagingOptions_DatatypePaging{} }
func (m *DataPagingOptions_DatatypePaging) String() string { return proto.CompactTextString(m) }
func (*DataPagingOptions_DatatypePaging) ProtoMessage()    {}
func (*DataPagingOptions_DatatypePaging) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{15, 0}
}

func (m *DataPagingOptions_DatatypePaging) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *DataPagingOptions_DatatypePaging) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *DataPagingOptions_DatatypePaging) GetSelectedTopPage() int32 {
	if m != nil {
		return m.SelectedTopPage
	}
	return 0
}

func (m *DataPagingOptions_DatatypePaging) GetSelectedBottomPage() int32 {
	if m != nil {
		return m.SelectedBottomPage
	}
	return 0
}

// correlator response
type CorrelatorResponse struct {
	// note: EventData.EventMetadata.correlatorScore should be assigned for each result.
	CorrelatorResults *EventData `protobuf:"bytes,1,opt,name=correlatorResults" json:"correlatorResults,omitempty"`
}

func (m *CorrelatorResponse) Reset()                    { *m = CorrelatorResponse{} }
func (m *CorrelatorResponse) String() string            { return proto.CompactTextString(m) }
func (*CorrelatorResponse) ProtoMessage()               {}
func (*CorrelatorResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *CorrelatorResponse) GetCorrelatorResults() *EventData {
	if m != nil {
		return m.CorrelatorResults
	}
	return nil
}

// request some event data for a list of samples
type ObservationDeckQuery struct {
	// identify the sample set to report
	SampleList []string `protobuf:"bytes,1,rep,name=sampleList" json:"sampleList,omitempty"`
	// identify which events to report
	EventList []*EventData_EventMetadata `protobuf:"bytes,2,rep,name=eventList" json:"eventList,omitempty"`
	// specify sample selection method
	SampleSelectionMethod *SampleSelectionMethod `protobuf:"bytes,3,opt,name=sampleSelectionMethod" json:"sampleSelectionMethod,omitempty"`
}

func (m *ObservationDeckQuery) Reset()                    { *m = ObservationDeckQuery{} }
func (m *ObservationDeckQuery) String() string            { return proto.CompactTextString(m) }
func (*ObservationDeckQuery) ProtoMessage()               {}
func (*ObservationDeckQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *ObservationDeckQuery) GetSampleList() []string {
	if m != nil {
		return m.SampleList
	}
	return nil
}

func (m *ObservationDeckQuery) GetEventList() []*EventData_EventMetadata {
	if m != nil {
		return m.EventList
	}
	return nil
}

func (m *ObservationDeckQuery) GetSampleSelectionMethod() *SampleSelectionMethod {
	if m != nil {
		return m.SampleSelectionMethod
	}
	return nil
}

// respond with some event data
type ObservationDeckResponse struct {
	// return event data for the requested sample set
	EventData []*EventData `protobuf:"bytes,1,rep,name=eventData" json:"eventData,omitempty"`
}

func (m *ObservationDeckResponse) Reset()                    { *m = ObservationDeckResponse{} }
func (m *ObservationDeckResponse) String() string            { return proto.CompactTextString(m) }
func (*ObservationDeckResponse) ProtoMessage()               {}
func (*ObservationDeckResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *ObservationDeckResponse) GetEventData() []*EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

// ways to select samples to return
type SampleSelectionMethod struct {
	SelectionEvent  *EventData_EventMetadata              `protobuf:"bytes,1,opt,name=selectionEvent" json:"selectionEvent,omitempty"`
	SelectionMethod SampleSelectionMethod_SelectionMethod `protobuf:"varint,2,opt,name=selectionMethod,enum=bmeg.SampleSelectionMethod_SelectionMethod" json:"selectionMethod,omitempty"`
	SamplePaging    *SamplePagingOptions                  `protobuf:"bytes,3,opt,name=samplePaging" json:"samplePaging,omitempty"`
}

func (m *SampleSelectionMethod) Reset()                    { *m = SampleSelectionMethod{} }
func (m *SampleSelectionMethod) String() string            { return proto.CompactTextString(m) }
func (*SampleSelectionMethod) ProtoMessage()               {}
func (*SampleSelectionMethod) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *SampleSelectionMethod) GetSelectionEvent() *EventData_EventMetadata {
	if m != nil {
		return m.SelectionEvent
	}
	return nil
}

func (m *SampleSelectionMethod) GetSelectionMethod() SampleSelectionMethod_SelectionMethod {
	if m != nil {
		return m.SelectionMethod
	}
	return SampleSelectionMethod_TOP_BOTTOM
}

func (m *SampleSelectionMethod) GetSamplePaging() *SamplePagingOptions {
	if m != nil {
		return m.SamplePaging
	}
	return nil
}

// selecting samples
type SamplePagingOptions struct {
	PageSize int32 `protobuf:"varint,1,opt,name=pageSize" json:"pageSize,omitempty"`
	// descending from most positive scores
	SelectedTopPage int32 `protobuf:"varint,2,opt,name=selectedTopPage" json:"selectedTopPage,omitempty"`
	// ascending from most negative scores
	SelectedBottomPage int32 `protobuf:"varint,3,opt,name=selectedBottomPage" json:"selectedBottomPage,omitempty"`
}

func (m *SamplePagingOptions) Reset()                    { *m = SamplePagingOptions{} }
func (m *SamplePagingOptions) String() string            { return proto.CompactTextString(m) }
func (*SamplePagingOptions) ProtoMessage()               {}
func (*SamplePagingOptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *SamplePagingOptions) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SamplePagingOptions) GetSelectedTopPage() int32 {
	if m != nil {
		return m.SelectedTopPage
	}
	return 0
}

func (m *SamplePagingOptions) GetSelectedBottomPage() int32 {
	if m != nil {
		return m.SelectedBottomPage
	}
	return 0
}

// events have metadata and data
type EventData struct {
	Metadata   *EventData_EventMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	SampleData []*EventData_SampleData  `protobuf:"bytes,2,rep,name=sampleData" json:"sampleData,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *EventData) GetMetadata() *EventData_EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventData) GetSampleData() []*EventData_SampleData {
	if m != nil {
		return m.SampleData
	}
	return nil
}

// information about an event
type EventData_EventMetadata struct {
	EventID string `protobuf:"bytes,1,opt,name=eventID" json:"eventID,omitempty"`
	// eventType could be something like mrna_expression, mutation_type, copy_number, clinical, etc.
	EventType string                           `protobuf:"bytes,2,opt,name=eventType" json:"eventType,omitempty"`
	Datatype  EventData_EventMetadata_Datatype `protobuf:"varint,3,opt,name=datatype,enum=bmeg.EventData_EventMetadata_Datatype" json:"datatype,omitempty"`
	// featureWeights applies to events that are signatures
	FeatureWeights  []*EventData_EventMetadata_FeatureWeight `protobuf:"bytes,4,rep,name=featureWeights" json:"featureWeights,omitempty"`
	CorrelatorScore float32                                  `protobuf:"fixed32,5,opt,name=correlatorScore" json:"correlatorScore,omitempty"`
}

func (m *EventData_EventMetadata) Reset()                    { *m = EventData_EventMetadata{} }
func (m *EventData_EventMetadata) String() string            { return proto.CompactTextString(m) }
func (*EventData_EventMetadata) ProtoMessage()               {}
func (*EventData_EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21, 0} }

func (m *EventData_EventMetadata) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

func (m *EventData_EventMetadata) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventData_EventMetadata) GetDatatype() EventData_EventMetadata_Datatype {
	if m != nil {
		return m.Datatype
	}
	return EventData_EventMetadata_STRING
}

func (m *EventData_EventMetadata) GetFeatureWeights() []*EventData_EventMetadata_FeatureWeight {
	if m != nil {
		return m.FeatureWeights
	}
	return nil
}

func (m *EventData_EventMetadata) GetCorrelatorScore() float32 {
	if m != nil {
		return m.CorrelatorScore
	}
	return 0
}

type EventData_EventMetadata_FeatureWeight struct {
	Feature string  `protobuf:"bytes,1,opt,name=feature" json:"feature,omitempty"`
	Weight  float32 `protobuf:"fixed32,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *EventData_EventMetadata_FeatureWeight) Reset()         { *m = EventData_EventMetadata_FeatureWeight{} }
func (m *EventData_EventMetadata_FeatureWeight) String() string { return proto.CompactTextString(m) }
func (*EventData_EventMetadata_FeatureWeight) ProtoMessage()    {}
func (*EventData_EventMetadata_FeatureWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{21, 0, 0}
}

func (m *EventData_EventMetadata_FeatureWeight) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

func (m *EventData_EventMetadata_FeatureWeight) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// sample data
type EventData_SampleData struct {
	SampleId string `protobuf:"bytes,1,opt,name=sampleId" json:"sampleId,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EventData_SampleData) Reset()                    { *m = EventData_SampleData{} }
func (m *EventData_SampleData) String() string            { return proto.CompactTextString(m) }
func (*EventData_SampleData) ProtoMessage()               {}
func (*EventData_SampleData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21, 1} }

func (m *EventData_SampleData) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *EventData_SampleData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*HeavilyWeightedGenesSignaturesQuery)(nil), "bmeg.HeavilyWeightedGenesSignaturesQuery")
	proto.RegisterType((*HeavilyWeightedGenesSignaturesResponse)(nil), "bmeg.HeavilyWeightedGenesSignaturesResponse")
	proto.RegisterType((*HeavilyWeightedGenesSignaturesResponseResponseItem)(nil), "bmeg.HeavilyWeightedGenesSignaturesResponse.responseItem")
	proto.RegisterType((*SampleDataForSamplesWithExtremeScoresQuery)(nil), "bmeg.SampleDataForSamplesWithExtremeScoresQuery")
	proto.RegisterType((*SampleDataForSamplesWithExtremeScoresResponse)(nil), "bmeg.SampleDataForSamplesWithExtremeScoresResponse")
	proto.RegisterType((*InferredVariantToSignatureEdgeQuery)(nil), "bmeg.InferredVariantToSignatureEdgeQuery")
	proto.RegisterType((*InferredVariantToSignatureEdgesResponse)(nil), "bmeg.InferredVariantToSignatureEdgesResponse")
	proto.RegisterType((*InferredVariantToSignatureEdgesResponse_ReturnObj)(nil), "bmeg.InferredVariantToSignatureEdgesResponse.ReturnObj")
	proto.RegisterType((*SampleGroupDetails)(nil), "bmeg.SampleGroupDetails")
	proto.RegisterType((*Quartiles)(nil), "bmeg.Quartiles")
	proto.RegisterType((*AvailableClinicalVarsQuery)(nil), "bmeg.AvailableClinicalVarsQuery")
	proto.RegisterType((*AvailableClinicalVarsResponse)(nil), "bmeg.AvailableClinicalVarsResponse")
	proto.RegisterType((*SampleClinicalDataQuery)(nil), "bmeg.SampleClinicalDataQuery")
	proto.RegisterType((*SampleClinicalDataResponse)(nil), "bmeg.SampleClinicalDataResponse")
	proto.RegisterType((*AvailableSignaturesQuery)(nil), "bmeg.AvailableSignaturesQuery")
	proto.RegisterType((*AvailableSignaturesResponse)(nil), "bmeg.AvailableSignaturesResponse")
	proto.RegisterType((*CorrelatorQuery)(nil), "bmeg.correlatorQuery")
	proto.RegisterType((*DataPagingOptions)(nil), "bmeg.DataPagingOptions")
	proto.RegisterType((*DataPagingOptions_DatatypePaging)(nil), "bmeg.DataPagingOptions.DatatypePaging")
	proto.RegisterType((*CorrelatorResponse)(nil), "bmeg.CorrelatorResponse")
	proto.RegisterType((*ObservationDeckQuery)(nil), "bmeg.ObservationDeckQuery")
	proto.RegisterType((*ObservationDeckResponse)(nil), "bmeg.ObservationDeckResponse")
	proto.RegisterType((*SampleSelectionMethod)(nil), "bmeg.SampleSelectionMethod")
	proto.RegisterType((*SamplePagingOptions)(nil), "bmeg.SamplePagingOptions")
	proto.RegisterType((*EventData)(nil), "bmeg.EventData")
	proto.RegisterType((*EventData_EventMetadata)(nil), "bmeg.EventData.EventMetadata")
	proto.RegisterType((*EventData_EventMetadata_FeatureWeight)(nil), "bmeg.EventData.EventMetadata.FeatureWeight")
	proto.RegisterType((*EventData_SampleData)(nil), "bmeg.EventData.SampleData")
	proto.RegisterEnum("bmeg.SampleSelectionMethod_SelectionMethod", SampleSelectionMethod_SelectionMethod_name, SampleSelectionMethod_SelectionMethod_value)
	proto.RegisterEnum("bmeg.EventData_EventMetadata_Datatype", EventData_EventMetadata_Datatype_name, EventData_EventMetadata_Datatype_value)
}

func init() { proto.RegisterFile("obs_deck.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1076 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0xce, 0xae, 0x31, 0xe0, 0x03, 0xfe, 0x61, 0x1a, 0x8a, 0xeb, 0x34, 0x12, 0xda, 0x4a, 0x94,
	0x26, 0x8a, 0x93, 0x90, 0xb6, 0x84, 0xaa, 0xa9, 0x92, 0x60, 0xa0, 0xae, 0x0a, 0x26, 0xd8, 0x0d,
	0x17, 0x8d, 0x14, 0x8d, 0x77, 0x0f, 0x66, 0xca, 0x7a, 0xd7, 0x99, 0x19, 0x3b, 0xd0, 0x27, 0xc9,
	0x53, 0x54, 0xea, 0x4d, 0x2f, 0xfb, 0x0a, 0xbd, 0xe8, 0xf3, 0x54, 0xaa, 0x76, 0x66, 0x76, 0xfd,
	0x83, 0xed, 0x98, 0xbb, 0x9d, 0x33, 0xf3, 0x7d, 0xe7, 0xef, 0x9b, 0xb3, 0x03, 0xb9, 0xb0, 0x29,
	0xde, 0x7a, 0xe8, 0x5e, 0x94, 0x3b, 0x3c, 0x94, 0x21, 0x99, 0x6b, 0xb6, 0xb1, 0xe5, 0x6c, 0xc3,
	0x17, 0x3f, 0x22, 0xed, 0x31, 0xff, 0xea, 0x14, 0x59, 0xeb, 0x5c, 0xa2, 0x77, 0x80, 0x01, 0x8a,
	0x3a, 0x6b, 0x05, 0x54, 0x76, 0x39, 0x8a, 0x57, 0x5d, 0xe4, 0x57, 0xa4, 0x00, 0x8b, 0x2d, 0x0c,
	0xf0, 0x67, 0x26, 0x64, 0xd1, 0x5a, 0x4f, 0x6d, 0x66, 0x9c, 0x7f, 0x2d, 0xd8, 0x98, 0x8e, 0x3c,
	0x41, 0xd1, 0x09, 0x03, 0x81, 0xe4, 0x18, 0xb2, 0xdc, 0x7c, 0x57, 0x25, 0xb6, 0x85, 0x62, 0x58,
	0xda, 0xda, 0x29, 0x47, 0x11, 0x94, 0x67, 0x23, 0x29, 0x0f, 0x32, 0x94, 0x4e, 0x61, 0x79, 0x70,
	0x4d, 0x9e, 0xc2, 0x8a, 0x88, 0x21, 0x87, 0x28, 0xa9, 0x47, 0x25, 0x2d, 0x5a, 0xeb, 0xd6, 0xe6,
	0xd2, 0xd6, 0x5d, 0xed, 0x65, 0xaf, 0x87, 0x81, 0xac, 0x50, 0x49, 0xf5, 0x57, 0x7c, 0x88, 0x64,
	0x21, 0x2d, 0xdc, 0x90, 0x63, 0xd1, 0x5e, 0xb7, 0x36, 0x6d, 0xe7, 0x83, 0x0d, 0xf7, 0xea, 0xb4,
	0xdd, 0xf1, 0x31, 0x3a, 0xbb, 0x1f, 0x72, 0xbd, 0x10, 0xa7, 0x4c, 0x9e, 0xef, 0x5d, 0x4a, 0x8e,
	0x6d, 0xac, 0x47, 0xc7, 0x4d, 0x59, 0x26, 0xf8, 0x4d, 0x7d, 0xdc, 0xef, 0x0e, 0x10, 0xbc, 0xec,
	0x70, 0x14, 0x82, 0x85, 0x41, 0x02, 0xb5, 0x67, 0x81, 0x7e, 0x0f, 0xab, 0xae, 0xcf, 0x02, 0xe6,
	0x52, 0x7f, 0x68, 0xa3, 0x98, 0x9a, 0x05, 0xbd, 0x0d, 0x85, 0x76, 0x57, 0x52, 0x39, 0xe8, 0x76,
	0x6e, 0x06, 0xa0, 0x53, 0x87, 0x07, 0x33, 0x55, 0x26, 0x69, 0xbb, 0x03, 0x19, 0x8c, 0xb9, 0x4c,
	0x51, 0xf2, 0x23, 0x2e, 0x22, 0xf9, 0x55, 0x83, 0x33, 0xe4, 0x1c, 0xbd, 0xd7, 0x94, 0x33, 0x1a,
	0xc8, 0x46, 0x98, 0x34, 0x7f, 0xcf, 0x6b, 0xe1, 0x24, 0xf9, 0xfd, 0x61, 0xc3, 0x97, 0xd3, 0x91,
	0xfd, 0x40, 0x7e, 0x82, 0x0c, 0x47, 0xd9, 0xe5, 0x41, 0xad, 0xf9, 0x9b, 0x09, 0x64, 0x5b, 0x07,
	0x32, 0x23, 0x43, 0xf9, 0x24, 0x86, 0x97, 0xfe, 0xb2, 0x20, 0x93, 0xac, 0x46, 0x53, 0xb4, 0xc6,
	0xa4, 0x48, 0x6e, 0xc3, 0x72, 0xa4, 0x11, 0x76, 0xc6, 0x5c, 0x1a, 0xb8, 0x46, 0x68, 0xe4, 0x6b,
	0x20, 0x42, 0x15, 0xf0, 0x80, 0x87, 0xdd, 0x4e, 0x05, 0x25, 0x65, 0xbe, 0x28, 0xa6, 0x14, 0x45,
	0x51, 0x53, 0xd4, 0xaf, 0xed, 0x93, 0x1d, 0x58, 0x6b, 0x52, 0xf7, 0xa2, 0xc5, 0xc3, 0x6e, 0xe0,
	0xa9, 0x1d, 0x2f, 0x86, 0xce, 0x4d, 0x87, 0x3a, 0xfb, 0x40, 0xc6, 0x10, 0x2e, 0xc3, 0x9c, 0x60,
	0xbf, 0xa3, 0x8a, 0x3d, 0x1d, 0xa5, 0xf3, 0xae, 0x4b, 0xb9, 0x64, 0x3e, 0x0a, 0x15, 0x67, 0x92,
	0xce, 0xab, 0xd8, 0xec, 0xfc, 0x0a, 0x99, 0x64, 0x41, 0xf2, 0xb0, 0xd0, 0x66, 0x01, 0x6b, 0x77,
	0xdb, 0x8a, 0xc1, 0x8e, 0xae, 0xd3, 0x19, 0xe3, 0x42, 0x9a, 0x2c, 0x73, 0x30, 0x2f, 0xd0, 0x0d,
	0x03, 0x4f, 0x65, 0xa6, 0xb6, 0xe5, 0x39, 0xe3, 0x9e, 0x8a, 0xd6, 0x56, 0x70, 0x7a, 0xa9, 0xe0,
	0x69, 0x75, 0xfd, 0x3e, 0x87, 0xd2, 0x8b, 0x1e, 0x65, 0x3e, 0x6d, 0xfa, 0xb8, 0x6b, 0x34, 0xfe,
	0x9a, 0x72, 0x7d, 0xdb, 0x9c, 0x1d, 0xb8, 0x3b, 0x76, 0x37, 0x69, 0x74, 0x11, 0x0a, 0x6e, 0xdf,
	0x7e, 0x44, 0xdb, 0x28, 0x8c, 0x5c, 0x9e, 0xc0, 0x9a, 0xce, 0x3e, 0xc6, 0x45, 0xad, 0xd1, 0xda,
	0x9a, 0x0c, 0x7a, 0x0e, 0xa5, 0xeb, 0xa0, 0x1b, 0xc9, 0xfb, 0x2b, 0x28, 0x26, 0x11, 0x8f, 0x8e,
	0xd4, 0x2c, 0xa4, 0xdf, 0x45, 0x1f, 0xaa, 0x72, 0x19, 0xe7, 0x0d, 0xdc, 0x19, 0x73, 0x34, 0xf1,
	0xf6, 0x0c, 0x3e, 0x4d, 0x26, 0xcd, 0xf0, 0xad, 0x9f, 0x65, 0xdc, 0x38, 0xef, 0x21, 0xef, 0x86,
	0x9c, 0xa3, 0x4f, 0x65, 0xc8, 0xb5, 0xff, 0xc7, 0x00, 0x1d, 0xd6, 0x0b, 0xa5, 0x3a, 0x38, 0xdb,
	0xb0, 0x7c, 0x0c, 0x85, 0x3e, 0xcb, 0x31, 0x6d, 0xb1, 0xa0, 0x65, 0x64, 0xb2, 0xa6, 0x81, 0x11,
	0x46, 0xdb, 0x6b, 0x9d, 0x68, 0xc2, 0x08, 0xe7, 0x6f, 0x0b, 0x56, 0xae, 0x59, 0xc9, 0x0f, 0x90,
	0x8b, 0x08, 0xe5, 0x55, 0x07, 0x0d, 0x8d, 0xce, 0x62, 0x63, 0x02, 0x8d, 0xb2, 0xf4, 0x4f, 0x97,
	0x18, 0xe4, 0x86, 0x2d, 0xd1, 0x84, 0x88, 0x19, 0x75, 0x41, 0x23, 0x4b, 0x87, 0xb6, 0xb0, 0x1e,
	0xc9, 0xdb, 0x56, 0xf2, 0x5e, 0x83, 0xbc, 0x40, 0x1f, 0x5d, 0x89, 0x5e, 0x23, 0xec, 0x1c, 0xd3,
	0x16, 0x2a, 0x59, 0xa6, 0x49, 0x09, 0x48, 0xbc, 0xf1, 0x32, 0x94, 0x32, 0x6c, 0xab, 0xbd, 0x48,
	0xa3, 0x69, 0xe7, 0x39, 0x90, 0xdd, 0x24, 0xe7, 0xa4, 0x1d, 0xf7, 0x60, 0xc5, 0x1d, 0xb4, 0x76,
	0x7d, 0x29, 0x26, 0x0c, 0x00, 0xe7, 0x83, 0x05, 0xb7, 0x6b, 0x4d, 0x81, 0xbc, 0xa7, 0xa6, 0x6e,
	0x05, 0xdd, 0x0b, 0xdd, 0x01, 0x02, 0xa0, 0x67, 0x40, 0x7f, 0xae, 0x91, 0x47, 0x46, 0x55, 0xca,
	0x34, 0xd3, 0xef, 0xe0, 0x3b, 0x58, 0xd5, 0x2c, 0x75, 0x95, 0x82, 0x9e, 0xeb, 0xe7, 0xa1, 0x67,
	0x86, 0xc9, 0x9d, 0xc1, 0x89, 0x30, 0x72, 0xc4, 0x79, 0x06, 0x6b, 0x23, 0x91, 0xdd, 0x48, 0xde,
	0xff, 0x59, 0xb0, 0x3a, 0x96, 0x98, 0x7c, 0x03, 0x39, 0x11, 0x9b, 0x6e, 0x20, 0xb0, 0x4a, 0xdc,
	0xa1, 0x7e, 0x16, 0x51, 0xeb, 0x72, 0x5b, 0xf7, 0xa7, 0x64, 0x51, 0x1e, 0x75, 0xfe, 0x10, 0x96,
	0x75, 0x45, 0x8c, 0xb6, 0x74, 0x21, 0x3e, 0x1b, 0xa4, 0x18, 0x16, 0xe9, 0xb7, 0x90, 0x1f, 0xe5,
	0xc8, 0x01, 0x34, 0x6a, 0xc7, 0x6f, 0x5f, 0xd6, 0x1a, 0x8d, 0xda, 0x61, 0xe1, 0x16, 0x59, 0x80,
	0x54, 0xa3, 0x76, 0x5c, 0xb0, 0x08, 0xc0, 0xbc, 0x31, 0xda, 0xce, 0x1b, 0xf8, 0x64, 0x0c, 0xdd,
	0x90, 0xf2, 0xac, 0x49, 0xca, 0xb3, 0xa7, 0x28, 0x4f, 0xa9, 0xd2, 0xf9, 0x27, 0x05, 0x99, 0xfe,
	0x6f, 0xe4, 0x21, 0x2c, 0xb6, 0x6f, 0xf4, 0xb2, 0x29, 0xc7, 0xea, 0xaa, 0xf4, 0x5f, 0x16, 0xa5,
	0x51, 0x48, 0xff, 0x8f, 0x5e, 0xfa, 0xd3, 0x86, 0xec, 0x30, 0x43, 0x1e, 0x16, 0x94, 0x04, 0xaa,
	0x15, 0x73, 0xa5, 0x56, 0x8c, 0x26, 0x1a, 0xd1, 0x2d, 0xb3, 0x95, 0xe9, 0xe9, 0xc0, 0xbd, 0x4b,
	0xa9, 0x56, 0x6d, 0x4c, 0x0d, 0x2b, 0xb9, 0xc9, 0x64, 0x17, 0x72, 0x67, 0xa8, 0xe6, 0x99, 0x7e,
	0xfa, 0x09, 0xf3, 0x0c, 0xb9, 0x3f, 0x1d, 0xbf, 0x3f, 0x88, 0x89, 0x0a, 0xdb, 0xbf, 0x87, 0xea,
	0xfd, 0xa1, 0xff, 0x24, 0xa5, 0x47, 0x90, 0x1d, 0x3e, 0x99, 0x87, 0x05, 0xe3, 0xce, 0x24, 0x93,
	0x83, 0xf9, 0xf7, 0x6a, 0xcb, 0x3c, 0xfd, 0xb6, 0x60, 0x31, 0x89, 0x0d, 0x60, 0xbe, 0xde, 0x38,
	0xa9, 0x1e, 0x1d, 0x14, 0x6e, 0x91, 0x25, 0x58, 0x38, 0xfa, 0xe5, 0x70, 0xef, 0xa4, 0xba, 0x5b,
	0xb0, 0x48, 0x16, 0x32, 0xbb, 0x2f, 0x1a, 0x7b, 0x07, 0xb5, 0x68, 0x69, 0x97, 0x1e, 0x00, 0xf4,
	0x2b, 0x18, 0xf5, 0x5d, 0x57, 0xbc, 0xea, 0x19, 0x1f, 0x59, 0x48, 0xf7, 0xa8, 0xdf, 0x35, 0xc5,
	0x6a, 0xce, 0xab, 0x97, 0xf7, 0x93, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x35, 0xbb, 0x64, 0xa0,
	0x8b, 0x0b, 0x00, 0x00,
}
