// Code generated by protoc-gen-go.
// source: variant.proto
// DO NOT EDIT!

package bmeg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Domain struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Gid  string `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Domain) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Domain) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// How does a particular mutation affect a transcript/protein?
//
// VariantCallEffect is most similar to the TranscriptEffect,
// VariantAnnotation, and HGVSAnnotation concepts in
// https://github.com/ga4gh/schemas/blob/variation_annotation/src/main/resources/avro/alleleAnnotations.avdl
//
// But MUCH simplified.
type VariantCallEffect struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Gid    string `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Source string `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	// The gene can mean either the gene or the protein this variant is associated with.
	VariantClassification string `protobuf:"bytes,5,opt,name=variantClassification" json:"variantClassification,omitempty"`
	// Target: Domain
	InDomain []string `protobuf:"bytes,6,rep,name=inDomain" json:"inDomain,omitempty"`
	// Target: Gene
	InGene []string `protobuf:"bytes,7,rep,name=inGene" json:"inGene,omitempty"`
	// Target: VariantCall
	EffectOf       []string `protobuf:"bytes,8,rep,name=effectOf" json:"effectOf,omitempty"`
	DbsnpRS        string   `protobuf:"bytes,9,opt,name=dbsnpRS" json:"dbsnpRS,omitempty"`
	DbsnpValStatus string   `protobuf:"bytes,10,opt,name=dbsnpValStatus" json:"dbsnpValStatus,omitempty"`
	// For now, a placeholder field/data dump of maf file fields such as trvType, cPosition, and aminoAcidChange
	// (Might want to consider stealing HGVS annotation data structure from GA4GH for latter two)
	Info map[string]string `protobuf:"bytes,11,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VariantCallEffect) Reset()                    { *m = VariantCallEffect{} }
func (m *VariantCallEffect) String() string            { return proto.CompactTextString(m) }
func (*VariantCallEffect) ProtoMessage()               {}
func (*VariantCallEffect) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *VariantCallEffect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VariantCallEffect) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *VariantCallEffect) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VariantCallEffect) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *VariantCallEffect) GetVariantClassification() string {
	if m != nil {
		return m.VariantClassification
	}
	return ""
}

func (m *VariantCallEffect) GetInDomain() []string {
	if m != nil {
		return m.InDomain
	}
	return nil
}

func (m *VariantCallEffect) GetInGene() []string {
	if m != nil {
		return m.InGene
	}
	return nil
}

func (m *VariantCallEffect) GetEffectOf() []string {
	if m != nil {
		return m.EffectOf
	}
	return nil
}

func (m *VariantCallEffect) GetDbsnpRS() string {
	if m != nil {
		return m.DbsnpRS
	}
	return ""
}

func (m *VariantCallEffect) GetDbsnpValStatus() string {
	if m != nil {
		return m.DbsnpValStatus
	}
	return ""
}

func (m *VariantCallEffect) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

// Here, a VariantCall is a combination of the 'Variant' and 'Call'
// types in GA4GH. Therefore it contains information about 1) genomic location
// (reserved for 'Variant' in GA4GH) and 2) a particular sample's genotype at that
// location (reserved for `Call` in GA4GH). Sample-id in
// GA4GH is contained within 'CallSet'. Here it is a VariantCall field.
// Genomic location has been replaced by a 'Position' object.
type VariantCall struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Gid  string `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// The source of this data
	Source      string `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	VariantType string `protobuf:"bytes,5,opt,name=variantType" json:"variantType,omitempty"`
	// The reference bases for this variant. They start at the given start
	// position. e.g. "T"
	ReferenceAllele string `protobuf:"bytes,6,opt,name=referenceAllele" json:"referenceAllele,omitempty"`
	// The normal alleles for this sample
	NormalAllele1 string `protobuf:"bytes,7,opt,name=normalAllele1" json:"normalAllele1,omitempty"`
	NormalAllele2 string `protobuf:"bytes,8,opt,name=normalAllele2" json:"normalAllele2,omitempty"`
	// The genotype of this variant call. GA4GH uses int32. Here it is a string.
	TumorAllele1 string `protobuf:"bytes,9,opt,name=tumorAllele1" json:"tumorAllele1,omitempty"`
	TumorAllele2 string `protobuf:"bytes,10,opt,name=tumorAllele2" json:"tumorAllele2,omitempty"`
	Sequencer    string `protobuf:"bytes,11,opt,name=sequencer" json:"sequencer,omitempty"`
	// where on the genome this variant occurred
	// Target: Position
	AtPosition []string `protobuf:"bytes,12,rep,name=atPosition" json:"atPosition,omitempty"`
	// Target: Biosample
	TumorSample []string `protobuf:"bytes,13,rep,name=tumorSample" json:"tumorSample,omitempty"`
	// Target: Biosample
	NormalSample []string `protobuf:"bytes,14,rep,name=normalSample" json:"normalSample,omitempty"`
	// A map of additional variant call information, including a Gene Id for now...
	Info map[string]string `protobuf:"bytes,15,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VariantCall) Reset()                    { *m = VariantCall{} }
func (m *VariantCall) String() string            { return proto.CompactTextString(m) }
func (*VariantCall) ProtoMessage()               {}
func (*VariantCall) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *VariantCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VariantCall) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *VariantCall) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VariantCall) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *VariantCall) GetVariantType() string {
	if m != nil {
		return m.VariantType
	}
	return ""
}

func (m *VariantCall) GetReferenceAllele() string {
	if m != nil {
		return m.ReferenceAllele
	}
	return ""
}

func (m *VariantCall) GetNormalAllele1() string {
	if m != nil {
		return m.NormalAllele1
	}
	return ""
}

func (m *VariantCall) GetNormalAllele2() string {
	if m != nil {
		return m.NormalAllele2
	}
	return ""
}

func (m *VariantCall) GetTumorAllele1() string {
	if m != nil {
		return m.TumorAllele1
	}
	return ""
}

func (m *VariantCall) GetTumorAllele2() string {
	if m != nil {
		return m.TumorAllele2
	}
	return ""
}

func (m *VariantCall) GetSequencer() string {
	if m != nil {
		return m.Sequencer
	}
	return ""
}

func (m *VariantCall) GetAtPosition() []string {
	if m != nil {
		return m.AtPosition
	}
	return nil
}

func (m *VariantCall) GetTumorSample() []string {
	if m != nil {
		return m.TumorSample
	}
	return nil
}

func (m *VariantCall) GetNormalSample() []string {
	if m != nil {
		return m.NormalSample
	}
	return nil
}

func (m *VariantCall) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Domain)(nil), "bmeg.Domain")
	proto.RegisterType((*VariantCallEffect)(nil), "bmeg.VariantCallEffect")
	proto.RegisterType((*VariantCall)(nil), "bmeg.VariantCall")
}

func init() { proto.RegisterFile("variant.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x69, 0x92, 0x4d, 0x93, 0x97, 0xa4, 0xdd, 0xcd, 0xee, 0xea, 0x43, 0x11, 0x6a, 0x4f,
	0x2b, 0x42, 0xc4, 0x7a, 0x11, 0xc1, 0x83, 0xac, 0x8b, 0x78, 0x52, 0xac, 0xec, 0x7d, 0x9a, 0xbe,
	0x2c, 0x83, 0x93, 0x99, 0x38, 0x99, 0x2c, 0xf4, 0xfb, 0xf8, 0x19, 0x3d, 0x4b, 0x5e, 0xb2, 0x22,
	0xb4, 0x07, 0xe9, 0xf1, 0xff, 0x9b, 0xe9, 0x7f, 0xde, 0xfb, 0x35, 0x90, 0xdd, 0x0b, 0x2b, 0x85,
	0x76, 0x45, 0x63, 0x8d, 0x33, 0x79, 0xb0, 0xa9, 0xe9, 0x6e, 0xf9, 0x1e, 0xc2, 0x8f, 0xa6, 0x16,
	0x52, 0xe7, 0x00, 0x9e, 0xdc, 0xe2, 0x64, 0x31, 0xb9, 0x8a, 0xf3, 0x04, 0xfc, 0x3b, 0xb9, 0x45,
	0x8f, 0x43, 0x0a, 0x81, 0xdb, 0x35, 0x84, 0xfe, 0x43, 0xd2, 0xa2, 0x26, 0x0c, 0xfa, 0xb4, 0xfc,
	0xe5, 0xc1, 0xd9, 0xed, 0x50, 0x7b, 0x2d, 0x94, 0xba, 0xa9, 0x2a, 0x2a, 0xdd, 0xff, 0x56, 0xcd,
	0x20, 0x6c, 0x4d, 0x67, 0xcb, 0xb1, 0x2c, 0x7f, 0x06, 0x97, 0xe3, 0x88, 0xd7, 0x4a, 0xb4, 0xad,
	0xac, 0x64, 0x29, 0x9c, 0x34, 0x1a, 0x4f, 0xf8, 0xf8, 0x14, 0x22, 0xa9, 0x87, 0x61, 0x31, 0x5c,
	0xf8, 0x43, 0x81, 0xd4, 0x9f, 0x48, 0x13, 0x4e, 0x39, 0x9f, 0x42, 0x44, 0x3c, 0xc1, 0x97, 0x0a,
	0x23, 0x26, 0x73, 0x98, 0x6e, 0x37, 0xad, 0x6e, 0xbe, 0xad, 0x31, 0xe6, 0x92, 0x47, 0x30, 0x63,
	0x70, 0x2b, 0xd4, 0xda, 0x09, 0xd7, 0xb5, 0x08, 0xcc, 0x5f, 0x41, 0x20, 0x75, 0x65, 0x30, 0x59,
	0xf8, 0x57, 0xc9, 0xea, 0x79, 0xd1, 0xcb, 0x29, 0xf6, 0x36, 0x2b, 0x3e, 0xeb, 0xca, 0xdc, 0x68,
	0x67, 0x77, 0x4f, 0x5e, 0x42, 0xfc, 0x37, 0xf4, 0x4b, 0xfe, 0xa0, 0xdd, 0xb8, 0x71, 0x06, 0x27,
	0xf7, 0x42, 0x75, 0x34, 0xec, 0xfc, 0xce, 0x7b, 0x3b, 0x59, 0xfe, 0xf6, 0x20, 0xf9, 0xa7, 0xec,
	0x58, 0x41, 0xe7, 0x90, 0x8c, 0x82, 0xbe, 0xf7, 0x97, 0x06, 0x2d, 0x8f, 0x61, 0x6e, 0xa9, 0x22,
	0x4b, 0xba, 0xa4, 0x0f, 0x4a, 0x91, 0x22, 0x0c, 0xf9, 0xe0, 0x12, 0x32, 0x6d, 0x6c, 0x2d, 0xd4,
	0x40, 0x5f, 0xe3, 0xf4, 0x10, 0x5e, 0x61, 0xc4, 0xf8, 0x02, 0x52, 0xd7, 0xd5, 0xc6, 0x3e, 0x5c,
	0x8e, 0x0f, 0xd0, 0xd5, 0x28, 0xeb, 0x0c, 0xe2, 0x96, 0x7e, 0x76, 0xfd, 0x8b, 0x16, 0x13, 0x46,
	0x39, 0x80, 0x70, 0x5f, 0x4d, 0x2b, 0xf9, 0x0f, 0x4b, 0x59, 0xfe, 0x39, 0x24, 0xfc, 0xe3, 0xb5,
	0xa8, 0x1b, 0x45, 0x98, 0x31, 0xbc, 0x80, 0x74, 0x78, 0x7e, 0xa4, 0x33, 0xa6, 0x2f, 0x46, 0xfd,
	0x73, 0xd6, 0xff, 0x74, 0x4f, 0xff, 0x91, 0xe2, 0x37, 0x21, 0x7f, 0xeb, 0x6f, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x60, 0xd7, 0xde, 0x38, 0xfc, 0x02, 0x00, 0x00,
}
