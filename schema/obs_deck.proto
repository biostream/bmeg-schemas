syntax = "proto3";

// Protocol Buffers description of API for Observation-Deck.
// chrisw
// 21APR16

package bmeg;

//
// USE CASE 1
// as described in <https://docs.google.com/document/d/1Gd8bCiZsXqbRqwdlnw_hcNvKXDGIOXcAJZcJbUnDrGU/edit?usp=sharing>
//

message HeavilyWeightedGenesSignaturesQuery {
	repeated string geneList = 1;
}

message HeavilyWeightedGenesSignaturesResponse {
	repeated responseItem responseItems = 1;

	message responseItem {
		EventData.EventMetadata signatureMetadata = 1;

		// composite score for query gene set
		float score = 2;
	}
}

// This is a ObservationDeckQuery where there is no sampleList.
message SampleDataForSamplesWithExtremeScoresQuery {

	// return the top 50 and bottom 50 scoring samples for these signatureEvents
	repeated EventData.EventMetadata signatureMetadata = 1;

	// return the expression values for the samples returned in signatureMetadata
	repeated EventData.EventMetadata expressionMetadata = 2;

	// return the clinical event data for the samples returned in signatureMetadata
	repeated EventData.EventMetadata clinicalEventMetadata = 3;

	// return the mutation data for the samples returned in signatureMetadata
	repeated EventData.EventMetadata mutationMetadata = 4;
}

// This is the same as ObservationDeckResponse.
message SampleDataForSamplesWithExtremeScoresResponse {
	repeated EventData eventData = 1;
}


//
// USE CASE 2
// as described in <https://docs.google.com/document/d/1Gd8bCiZsXqbRqwdlnw_hcNvKXDGIOXcAJZcJbUnDrGU/edit?usp=sharing>
//


message InferredVariantToSignatureEdgeQuery {
	repeated string geneList = 1;
}

// This is the same as ObservationDeckResponse.
// We expect to have at least the following: expression, mutation call, and drug sensitivity signature.
// Might also have copy number, and mutation impact score.
message InferredVariantToSignatureEdgesResponse {
	message ReturnObj{
		EventData eventData = 1;
		float significance = 2;
		SampleGroupDetails sampleGroupDetails = 3;
		SampleGroupDetails backgroundGroupdDetails = 4;
	}
	repeated ReturnObj returnObj = 1;
}

// some basic details about a sample group
message SampleGroupDetails {
	int32 size = 1;
	Quartiles quartiles = 2;
}

// information for calculating data range and interquartile range
message Quartiles {
	float minimum = 1;
	float first = 2;
	float second = 3;
	float third = 4;
	float maximum = 5;
}


//
// OTHER USEFUL MESSAGES
//

// query to get available clinical variable names
message AvailableClinicalVarsQuery{
}

// response is a list of available clinical variable names
message AvailableClinicalVarsResponse{
	repeated string clinicalVarNames = 1;
}


// request clinical data
message SampleClinicalDataQuery{
	repeated string clinicalVarNames = 1;
}

// respond with sample clinical data
message SampleClinicalDataResponse{
	repeated EventData eventData = 1;
}


// query for signatures by name
// If no query was sent, return all signatures
message AvailableSignaturesQuery{
	string query = 1;
}

// signature name response
message AvailableSignaturesResponse{
	repeated EventData.EventMetadata signatureEventMetadata = 1;
}

// correlator query
message correlatorQuery{
	EventData.EventMetadata pivotEvent = 1;

	// paging tells us how far down the ordered list of scored events we should return data for.
	DataPagingOptions correlatorPaging = 2;
}

// for specifying page of correlator results for each datatype
message DataPagingOptions{
	repeated DatatypePaging datatypePaging = 1;

	message DatatypePaging{
		string datatype = 1;
		int32 pageSize = 2;

		// descending from most positive scores
		int32 selectedTopPage = 3;

		// ascending from most negative scores
		int32 selectedBottomPage = 4;
	}
}

// correlator response
message CorrelatorResponse{
	// note: EventData.EventMetadata.correlatorScore should be assigned for each result.
	EventData correlatorResults = 1;
}

// TODO pathway graph query/response


// GENERALIZED observation deck sample data query

// request some event data for a list of samples
message ObservationDeckQuery {
	// identify the sample set to report
	repeated string sampleList = 1;

	// identify which events to report
	repeated EventData.EventMetadata eventList = 2;

	// specify sample selection method
	SampleSelectionMethod sampleSelectionMethod = 3;
}

// respond with some event data
message ObservationDeckResponse {
	// return event data for the requested sample set
	repeated EventData eventData = 1;
}

// ways to select samples to return
message SampleSelectionMethod {
	EventData.EventMetadata selectionEvent = 1;
	SelectionMethod selectionMethod = 2;
	SamplePagingOptions samplePaging = 3;

	enum SelectionMethod {
		TOP_BOTTOM = 0;
		TOP = 1;
		BOTTOM = 2;
	}
}

// selecting samples
message SamplePagingOptions {
	int32 pageSize = 1;

	// descending from most positive scores
	int32 selectedTopPage = 2;

	// ascending from most negative scores
	int32 selectedBottomPage=3;
}

// events have metadata and data
message EventData {
	EventMetadata metadata = 1;
	repeated SampleData sampleData = 2;

	// information about an event
	message EventMetadata {
		string eventID = 1;

		// eventType could be something like mrna_expression, mutation_type, copy_number, clinical, etc.
		string eventType = 2;

		Datatype datatype = 3;

		// Is SampleData.val to be interpreted as a string, number, or category?
		enum Datatype {
			STRING = 0;
			NUMERIC = 1;
			CATEGORIC = 2;
		}

		// featureWeights applies to events that are signatures
		repeated FeatureWeight featureWeights = 4;

		message FeatureWeight {
			string feature = 1;
			float weight = 2;
		}

		float correlatorScore = 5;
	}

	// sample data
	message SampleData {
		string sampleId = 1;
		string value = 2;
	}
}
